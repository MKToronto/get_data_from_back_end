{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Chip.svelte",
    "Icon.svelte",
    "NavigationDrawer.svelte",
    "ProgressCircular.svelte",
    "ProgressLinear.svelte",
    "Ripple.svelte",
    "Snackbar.svelte",
    "Label.svelte",
    "Underline.svelte",
    "Tooltip.svelte",
    "Waypoint.svelte",
    "Icon.svelte",
    "UploadedSoFar.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n  import { scale } from \"svelte/transition\";\n  import createRipple from \"../Ripple/ripple.js\";\n  import utils, { ClassBuilder, filterProps } from \"../../utils/classes.js\";\n\n  import Icon from \"../Icon\";\n\n\n\n  export let removable = false;\n  export let icon = \"\";\n  export let outlined = false;\n  export let selected = false;\n  export let selectable = true;\n  export let color = \"primary\";\n  export let remove = \"\";\n  export let add = \"\";\n  export let replace = {};\n\n  $: ripple = createRipple(color);\n\n  let value = true;\n\n  const dispatch = createEventDispatcher();\n\n  function close() {\n    dispatch(\"close\");\n    value = false;\n  }\n\n  function select() {\n    if (!selectable) return;\n\n    selected = true;\n  }\n\n  const { bg, txt, border } = utils(color);\n\n  const cb = new ClassBuilder();\n\n  $: classes = cb\n    .flush()\n    .add('relative overflow-hidden flex items-center rounded-full px-2 py-1')\n    .add('bg-transparent border', outlined)\n    .add('border-gray-400 border-solid hover:bg-gray-100 dark-hover:bg-dark-400 bg-gray-300 dark:bg-dark-600', !selected)\n    .add(`${border()} dark:${border('800')} ${txt()} ${bg(100)} hover:${bg(50)}`, selected)\n    .remove(remove)\n    .replace(replace)\n    .add(add)\n    .get();\n\n  const props = filterProps([\n    'removable',\n    'icon',\n    'outlined',\n    'selected',\n    'selectable',\n    'color',\n  ], $$props);\n\n  $: iconClass = selected ? `hover:${bg(300)} ${bg(400)}` : \"hover:bg-gray-400 bg-gray-500 dark:bg-gray-800\";\n\n   $: c = cb\n      .flush()\n      .add($$props.class)\n      .get();\n</script>\n\n<style>\n  .p-1\\/2 {\n    padding: 0.125rem;\n  }\n</style>\n\n{#if value}\n  <span class=\"{c} mx-1 inline-block\" out:scale={{ duration: 100 }}>\n    <button\n      class={classes}\n      on:click\n      use:ripple\n      {...props}\n      on:click={select}>\n      {#if icon}\n        <Icon small class={selected ? txt(400) : 'text-gray-600'}>\n          {icon}\n        </Icon>\n      {/if}\n      <span class=\"px-2 text-sm\">\n        <slot />\n      </span>\n      {#if removable}\n        <span\n          class=\"rounded-full p-1/2 inline-flex items-center cursor-pointer {iconClass}\"\n          on:click|stopPropagation={close}>\n          <Icon class=\"text-white dark:text-white\" xs>clear</Icon>\n        </span>\n      {/if}\n    </button>\n  </span>\n{/if}\n",
    "<script>\n\n\n  export let small = false;\n  export let xs = false;\n  export let reverse = false;\n  export let tip = false;\n  export let color = \"default\";\n</script>\n\n<style>\n  .reverse {\n    transform: rotate(180deg);\n  }\n\n  .tip {\n    transform: rotate(90deg);\n  }\n</style>\n\n<i\n  aria-hidden=\"true\"\n  class=\"material-icons icon text-xl select-none {$$props.class} duration-200 ease-in\"\n  class:reverse\n  class:tip\n  on:click\n  class:text-base={small}\n  class:text-xs={xs}\n  style={color ? `color: ${color}` : ''}>\n  <slot />\n</i>\n",
    "<script>\n  import { fly } from \"svelte/transition\";\n  import { quadIn } from \"svelte/easing\";\n  import { Scrim } from \"../Util\";\n  import breakpoints from \"../../breakpoints\";\n  import { ClassBuilder } from \"../../utils/classes.js\";\n\n  const bp = breakpoints();\n\n  const classesDefault = \"fixed top-0 md:mt-16 w-auto drawer overflow-hidden h-full\";\n  const navClassesDefault = `h-full w-full bg-white dark:bg-gray-900 dark:text-gray-200 absolute flex w-auto z-20 drawer\n    pointer-events-auto overflow-y-auto`;\n\n  export let right = false;\n  export let persistent = false;\n  export let elevation = true;\n  export let show = true;\n  export let classes = classesDefault;\n  export let navClasses = navClassesDefault;\n  export let borderClasses = `border-gray-600 ${right ? \"border-l\" : \"border-r\"}`;\n\n\n\n\n  export let transitionProps = {\n    duration: 200,\n    x: -300,\n    easing: quadIn,\n    opacity: 1,\n  };\n\n  $: transitionProps.x = right ? 300 : -300;\n\n  // Is the drawer deliberately hidden? Don't let the $bp check make it visible if so.\n  let hidden = !show;\n  $: if (!hidden) persistent = show = $bp !== \"sm\";\n\n  const cb = new ClassBuilder(classes, classesDefault);\n\n  if ($bp === 'sm') show = false;\n\n  $: c = cb\n    .flush()\n    .add(classes, true, classesDefault)\n    .add(borderClasses, !elevation && persistent)\n    .add($$props.class)\n    .add(\"right-0\", right)\n    .add(\"left-0\", !right)\n    .add(\"pointer-events-none\", persistent)\n    .add(\"z-50\", !persistent)\n    .add(\"shadow\", elevation)\n    .add(\"z-20\", persistent)\n    .get();\n\n  const ncb = new ClassBuilder(navClasses, navClassesDefault);\n\n  $: n = ncb\n    .flush()\n    .get();\n\n</script>\n\n<style>\n  .drawer {\n    min-width: 250px;\n  }\n\n  aside {\n    height: 100vh;\n  }\n</style>\n\n{#if show}\n  <aside\n    class={c}\n    transition:fly={transitionProps}\n  >\n    {#if !persistent}\n      <Scrim on:click={() => show = false} />\n    {/if}\n    <nav\n      role=\"navigation\"\n      class={n}\n    >\n      <div class=\"w-full\">\n        <slot />\n      </div>\n    </nav>\n  </aside>\n{/if}\n",
    "<script>\n  export let progress = null;\n  export let color = \"primary\";\n  export let width = 3;\n  export let size = 70;\n\n  $: style = progress > 0 ? `\n      animation: none;\n      stroke-dasharray: ${150000 - progress * 1000};\n      stroke-dashoffset: -${124 - (progress * 124) / 100};\n    ` : \"\";\n</script>\n\n<style>\n  .circular {\n    animation: rotate 2s linear infinite;\n    position: relative;\n  }\n\n  .path {\n    stroke-dasharray: 1, 200;\n    stroke-dashoffset: 0;\n    stroke-linecap: round;\n    animation: dash 1.5s ease-in-out infinite;\n  }\n\n  @keyframes rotate {\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n\n  @keyframes dash {\n    0% {\n      stroke-dasharray: 1, 200;\n      stroke-dashoffset: 0;\n    }\n    50% {\n      stroke-dasharray: 89, 200;\n      stroke-dashoffset: -35;\n    }\n    100% {\n      stroke-dasharray: 89, 200;\n      stroke-dashoffset: -124;\n    }\n  }\n</style>\n\n<svg class=\"circular\" style=\"width: {size}px; height: {size}px;\">\n  <circle\n    class=\"path stroke-{color}\"\n    cx={size / 2}\n    cy={size / 2}\n    fill=\"none\"\n    r={(size / 2) - (size / 5)}\n    stroke-width={width}\n    stroke-miterlimit=\"10\"\n    {style} />\n</svg>\n",
    "<script>\n  import { onMount } from \"svelte\";\n  import { slide } from \"svelte/transition\";\n\n  export let app = false;\n  export let progress = 0;\n  export let color = \"primary\";\n\n  let initialized = false;\n\n  onMount(() => {\n    if (!app) return;\n\n    setTimeout(() => {\n      initialized = true;\n    }, 200);\n  });\n</script>\n\n<style>\n  /* kudos https://codepen.io/shalimano/pen/wBmNGJ */\n  .inc {\n    animation: increase 2s ease-in-out infinite;\n  }\n  .dec {\n    animation: decrease 2s 0.9s ease-in-out infinite;\n  }\n\n  @keyframes increase {\n    from {\n      left: -5%;\n      width: 5%;\n    }\n    to {\n      left: 130%;\n      width: 150%;\n    }\n  }\n  @keyframes decrease {\n    from {\n      left: -90%;\n      width: 90%;\n    }\n    to {\n      left: 110%;\n      width: 10%;\n    }\n  }\n</style>\n\n<div\n  class:fixed={app}\n  class:z-50={app}\n  class=\"top-0 left-0 w-full h-1 bg-{color}-100 overflow-hidden relative\"\n  class:hidden={app && !initialized}\n  transition:slide={{ duration: 300 }}>\n  <div\n    class=\"bg-{color}-500 h-1 absolute\"\n    class:inc={!progress}\n    class:transition={progress}\n    style={progress ? `width: ${progress}%` : \"\"} />\n  <div class=\"bg-{color}-500 h-1 absolute dec\" class:hidden={progress} />\n</div>\n",
    "<script>\n  export let color = \"primary\";\n  export let noHover = false;\n  import createRipple from \"../Ripple/ripple.js\";\n\n  $: ripple = createRipple(color, true);\n  $: hoverClass = `hover:bg-${color}-transLight`;\n</script>\n\n<style>\n  .ripple {\n    position: absolute !important;\n  }\n</style>\n\n<span\n  use:ripple\n  class=\"z-40 {$$props.class} p-2 rounded-full flex items-center justify-center top-0 left-0 {noHover ? \"\" : hoverClass}\">\n  <slot />\n</span>\n",
    "<script context=\"module\">\n  import { writable } from \"svelte/store\";\n\n  const queue = writable([]);\n  let running = false;\n</script>\n\n<script>\n  import { fade, scale } from \"svelte/transition\";\n  import { createEventDispatcher } from \"svelte\";\n\n  import { quadOut, quadIn } from \"svelte/easing\";\n  import Button from \"../Button\";\n  import { Spacer } from \"../Util\";\n  import utils, { ClassBuilder } from \"../../utils/classes.js\";\n\n  export let value = false;\n  export let timeout = 2000;\n  export let inProps = { duration: 100, easing: quadIn };\n  export let outProps = { duration: 100, easing: quadOut, delay: 150 };\n  export let color = \"gray\";\n  export let text = \"white\";\n  export let top = false;\n  export let bottom = true;\n  export let right = false;\n  export let left = false;\n  export let noAction = true;\n  export let hash = false;\n\n  const dispatch = createEventDispatcher();\n\n  const classesDefault = `pointer-events-auto flex absolute py-2 px-4 z-30 mb-4 content-between mx-auto\n      rounded items-center shadow-sm h-12`;\n  const wrapperDefault = \"fixed w-full h-full flex items-center justify-center pointer-events-none\";\n\n  export let classes = wrapperDefault;\n\n  const cb = new ClassBuilder($$props.class, classesDefault);\n  const wrapperCb = new ClassBuilder(classes, wrapperDefault);\n\n  let wClasses = i => i;\n  let tm;\n  let node;\n\n  let bg = () => {};\n\n  $: {\n    const u = utils(color || \"gray\");\n    bg = u.bg;\n  }\n\n  $: {\n    hash = hash || (value ? btoa(`${value}${new Date().valueOf()}`) : null);\n    value = value;\n  }\n\n  $: toggler = () => toggle(value, hash);\n\n  $: if (value) {\n    queue.update(u => [...u, toggler]);\n  }\n\n  $: if (!running && value && $queue.length) {\n    $queue.shift()();\n  }\n\n  $: if (!value) clearTimeout(tm);\n\n  function toggle(h, id) {\n    if (value === false && running === false) {\n      return;\n    }\n    hash = running = value = id;\n\n    if (!timeout) return;\n\n    tm = setTimeout(() => {\n      value = running = hash = false;\n      dispatch(\"finish\");\n\n      if ($queue.length) {\n        $queue.shift()();\n      }\n    }, timeout);\n  }\n\n  $: c = cb\n      .flush()\n      .add(bg(800), color)\n      .add(\"right-0 mr-2\", right)\n      .add(\"top-0 mt-2\", top)\n      .add(\"left-0 ml-2\", left)\n      .add(\"bottom-0\", bottom)\n      .add(\"snackbar\", !noAction)\n      .get();\n\n  // for some reason it doesn't get updated otherwise\n  $: if (node) node.classList = c;\n\n  wClasses = wrapperCb\n    .flush()\n    .add(`text-${text}`)\n    .get();\n</script>\n\n<style>\n  .snackbar {\n    min-width: 344px;\n  }\n</style>\n\n{#if value && (running === hash)}\n  <div\n    class=\"fixed w-full h-full top-0 left-0 z-30 pointer-events-none\"\n  >\n    <div class={wClasses}>\n      <div\n        bind:this={node}\n        in:scale={inProps}\n        out:fade={outProps}\n        on:click={() => value = false}>\n        <slot />\n        {#if !noAction}\n          <Spacer />\n          <slot name=\"action\">\n            {#if !timeout}\n              <Button text on:click={() => value = false}>Close</Button>\n            {/if}\n          </slot>\n        {/if}\n      </div>\n    </div>\n  </div>\n{/if}\n",
    "<script>\n  import utils, { ClassBuilder, filterProps } from \"../../utils/classes.js\";\n\n\n\n  export let focused = false;\n  export let error = false;\n  export let outlined = false;\n  export let labelOnTop = false;\n  export let prepend = false;\n  export let color = \"primary\";\n  // for outlined button label\n  export let bgColor = \"white\";\n  export let dense = false;\n\n  let labelDefault = `pt-4 absolute top-0 label-transition block pb-2 px-4 pointer-events-none cursor-text`;\n\n  export let add = \"\";\n  export let remove = \"\";\n  export let replace = \"\";\n\n  export let labelClasses = labelDefault;\n\n  const {\n    border,\n    txt,\n  } = utils(color);\n\n  const l = new ClassBuilder(labelClasses, labelDefault);\n\n  let lClasses = i => i;\n\n  $: lClasses = l\n      .flush()\n      .add(txt(), focused && !error)\n      .add('text-error-500', focused && error)\n      .add('label-top text-xs', labelOnTop)\n      .add('text-xs', focused)\n      .remove('pt-4 pb-2 px-4 px-1 pt-0', labelOnTop && outlined)\n      .add(`ml-3 p-1 pt-0 mt-0 bg-${bgColor} dark:bg-dark-500`, labelOnTop && outlined)\n      .remove('px-4', prepend)\n      .add('pr-4 pl-10', prepend)\n      .remove('pt-4', dense)\n      .add('pt-3', dense)\n      .add(add)\n      .remove(remove)\n      .replace(replace)\n      .get();\n\n  const props = filterProps([\n    'focused',\n    'error',\n    'outlined',\n    'labelOnTop',\n    'prepend',\n    'color',\n    'dense'\n  ], $$props);\n</script>\n\n<style>\n.label-top {\n  line-height: 0.05;\n}\n.label-transition {\n  transition: font-size 0.05s, line-height 0.1s;\n}\n:global(label.text-xs) {\n  font-size: 0.7rem;\n}\n</style>\n\n<label class=\"{lClasses} {$$props.class}\" {...props}>\n  <slot />\n</label>\n",
    "<script>\n  import utils, { ClassBuilder, filterProps } from \"../../utils/classes.js\";\n\n\n\n  export let noUnderline = false;\n  export let outlined = false;\n  export let focused = false;\n  export let error = false;\n  export let color = \"primary\";\n\n  let defaultClasses = `mx-auto w-0`;\n\n  export let add = \"\";\n  export let remove = \"\";\n  export let replace = \"\";\n\n  export let lineClasses = defaultClasses;\n\n  const {\n    bg,\n    border,\n    txt,\n    caret,\n  } = utils(color);\n\n  const l = new ClassBuilder(lineClasses, defaultClasses);\n\n  let Classes = i => i;\n\n  $: classes = l\n      .flush()\n      .add(txt(), focused && !error)\n      .add('bg-error-500', error)\n      .add('w-full', focused || error)\n      .add(bg(), focused)\n      .add(add)\n      .remove(remove)\n      .replace(replace)\n      .get();\n\n  const props = filterProps([\n    'focused',\n    'error',\n    'outlined',\n    'labelOnTop',\n    'prepend',\n    'bgcolor',\n    'color'\n  ], $$props);\n</script>\n\n<style>\n.line {\n  height: 1px;\n}\n</style>\n\n<div\n  class=\"line absolute bottom-0 left-0 w-full bg-gray-600 {$$props.class}\"\n  class:hidden={noUnderline || outlined}>\n  <div\n    class=\"{classes}\"\n    style=\"height: 2px; transition: width .2s ease\" />\n</div>\n",
    "<script>\n  import { scale, fade } from \"svelte/transition\";\n  import { ClassBuilder } from \"../../utils/classes.js\";\n\n  const classesDefault = \"tooltip whitespace-nowrap text-xs absolute mt-2 bg-gray-600 text-gray-50 rounded md:px-2 md:py-2 py-4 px-3 z-30\";\n\n  export let classes = classesDefault;\n\n\n  export let show = false;\n\n  export let timeout = null;\n  export let delayHide = 100;\n  export let delayShow = 100;\n\n  const cb = new ClassBuilder(classes, classesDefault);\n  $: c = cb\n    .flush()\n    .add(classes, true, classesDefault)\n    .add($$props.class)\n    .get();\n\n  function showTooltip() {\n    if (show) return;\n\n    show = true;\n\n    if (!timeout) return;\n\n    timeout = setTimeout(() => {\n      show = false;\n    }, timeout);\n  }\n\n  function hideTooltip() {\n    if (!show) return;\n\n    show = false;\n    clearTimeout(timeout);\n  }\n\n  function debounce(func, wait, immediate) {\n    let timeout;\n    return function() {\n      let context = this,\n        args = arguments;\n      let later = function() {\n        timeout = null;\n        if (!immediate) func.apply(context, args);\n      };\n      let callNow = immediate && !timeout;\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n      if (callNow) func.apply(context, args);\n    };\n  }\n</script>\n\n<style>\n.tooltip {\n  left: 50%;\n  transform: translateX(-50%);\n}\n</style>\n\n<div class=\"relative inline-block\">\n  <div\n    on:mouseenter={debounce(showTooltip, delayShow)}\n    on:mouseleave={debounce(hideTooltip, delayHide)}\n    on:mouseenter\n    on:mouseleave\n    on:mouseover\n    on:mouseout\n  >\n    <slot name=\"activator\" />\n  </div>\n\n  {#if show}\n    <div\n      in:scale={{ duration: 150 }}\n      out:scale={{ duration: 150, delay: 100 }}\n      class={c}\n    >\n      <slot />\n    </div>\n  {/if}\n</div>\n",
    "<script>\n  import { createEventDispatcher, onDestroy } from 'svelte';\n\n  const dispatch = createEventDispatcher();\n\n  export let offset = 0;\n  export let throttle = 250;\n  export let c = '';\n  export let style = '';\n  export let once = true;\n  export let threshold = 1.0;\n  export let disabled = false;\n\n  let className = \"\";\n  export { className as class };\n\n  let visible = disabled;\n  let wasVisible = false;\n  let intersecting = false;\n  let removeHandlers = () => {};\n\n  function throttleFn(fn, time) {\n    let last, deferTimer;\n\n    return () => {\n      const now = +new Date;\n\n      if (last && now < last + time) {\n        // hold on to it\n        clearTimeout(deferTimer);\n        deferTimer = setTimeout(function () {\n          last = now;\n          fn();\n        }, time);\n      } else {\n        last = now;\n        fn();\n      }\n    };\n  }\n\n  function callEvents(wasVisible, observer, node) {\n    if (visible && !wasVisible) {\n      dispatch('enter');\n      return;\n    }\n\n    if (wasVisible && !intersecting) {\n      dispatch('leave');\n    }\n\n    if (once && wasVisible && !intersecting) {\n      removeHandlers();\n    }\n  }\n\n  function waypoint(node) {\n    if (!window || disabled) return;\n\n    if (window.IntersectionObserver && window.IntersectionObserverEntry) {\n      const observer = new IntersectionObserver(([ { isIntersecting } ]) => {\n        wasVisible = visible;\n\n        intersecting = isIntersecting;\n\n        if (wasVisible && once && !isIntersecting) {\n          callEvents(wasVisible, observer, node);\n          return;\n        }\n\n        visible = isIntersecting;\n\n        callEvents(wasVisible, observer, node);\n      }, {\n        rootMargin: offset + 'px',\n        threshold,\n      });\n\n      observer.observe(node);\n\n      removeHandlers = () => observer.unobserve(node);\n\n      return removeHandlers;\n    }\n\n    function checkIsVisible() {\n      // Kudos https://github.com/twobin/react-lazyload/blob/master/src/index.jsx#L93\n      if (!(node.offsetWidth || node.offsetHeight || node.getClientRects().length)) return;\n\n      let top;\n      let height;\n\n      try {\n        ({ top, height } = node.getBoundingClientRect());\n      } catch (e) {\n        ({ top, height } = defaultBoundingClientRect);\n      }\n\n      const windowInnerHeight = window.innerHeight\n        || document.documentElement.clientHeight;\n\n      wasVisible = visible;\n      intersecting = (top - offset <= windowInnerHeight) &&\n        (top + height + offset >= 0);\n\n      if (wasVisible && once && !isIntersecting) {\n        callEvents(wasVisible, observer, node);\n        return;\n      }\n\n      visible = intersecting;\n\n      callEvents(wasVisible);\n    }\n\n    checkIsVisible();\n\n    const throttled = throttleFn(checkIsVisible, throttle);\n\n    window.addEventListener('scroll', throttled);\n    window.addEventListener('resize', throttled);\n\n    removeHandlers = () => {\n      window.removeEventListener('scroll', throttled);\n      window.removeEventListener('resize', throttled);\n    }\n\n    return removeHandlers;\n  }\n</script>\n\n<style>\n.wrapper {\n  display: inline-block;\n}\n</style>\n\n<div class=\"wrapper {className} {c}\" {style} use:waypoint>\n  {#if visible}\n    <slot />\n  {/if}\n</div>\n",
    "<script>\n  import classnames from './utils';\n\n  let className = '';\n  export { className as class };\n  export let name = '';\n\n  $: classes = classnames(className, `bi-${name}`);\n</script>\n\n<style>\n  @import url('https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css');\n</style>\n\n<i {...$$restProps} class={classes} />\n",
    "<script>\n    // import { DataTable, Image } from \"smelte\";\n    import {completed_batches,plain_pngs_paths, \n       sobel_jpgs_paths, timestamps,\n         create_mode_dir, number_of_jobs_left, \n        ready_to_work ,  collection_running,\n        batches_left_to_process,\n         fetching_images ,\n        completed_collection,\n         showProcessDialog, \n        matching_local_company_names, local_company_selection, matching_local_product_names, \n        local_product_selection, matching_local_user_names, local_user_selection,\n        local_company_search_term, local_product_search_term, \n        local_user_search_term, \n        local_collection_id, matching_local_collection_ids, collection_ids, plain_jpgs_paths,\n        image_quality\n\n      } from './stores.js';\n    import { afterUpdate, beforeUpdate, onMount } from 'svelte';\n    import {Badge} from 'sveltestrap'\n\n   \n    import {\n      Card,\n      Button,\n      Image,\n      Dialog,\n      \n      Switch,\n      \n      TextField,\n      \n    } from \"smelte\";\n    \n   \n  import { zoom } from './zoom.js'\n  \n\n\n  // afterUpdate() {\n\n  // }\n    // async function () {\n    //   if (typeof window === \"undefined\") return;\n  \n    //   loading = true;\n    //   const res = await fetch(\"data.json\");\n    //   const body = await res.json();\n  \n    //   data = body._embedded.episodes;\n  \n    //   setTimeout(() => loading = false, 500);\n    // }\n  \n    // getData();\n    let batch_no = 1;\n    // let showProcessDialog;\n    // $: showProcessDialog = false\n    let showImageModal = false;\n    let showdetailsModal = false;\n    let showViewVariablesModal = false;\n    let show_batch_notes_modal = false;\n    function openDetailsModal(batch_number) {\n        \n        batch_no = batch_number;\n        // console.log(\"batch_number\", batch_number)\n        showdetailsModal = true\n        get_all_completed_batches(batch_no)\n     }\n\n     function open_batch_notes_modal(batch_number) {\n        batch_no = batch_number;\n        // console.log(\"batch_number\", batch_number)\n        show_batch_notes_modal = true\n        get_all_completed_batches(batch_no)\n     }\n\n     function openImageModal(batch_number) {\n        \n        get_all_images(batch_number)\n        batch_no = batch_number;\n        showImageModal = true\n        // console.log(batch_number)\n     }\n    \n    let plain_pngs_paths_string = \"\";\n    let sobel_jpgs_paths_string = \"\";\n    let plain_jpgs_paths_string = \"\";\n     \n\n    export async function get_all_images(batch_no){\n      const response = await fetch(\"./get_all_images/\"+batch_no);\n      console.log(\"response\", response)\n      const image_paths_retrieved = await response.json();\n      console.log(\"image_paths_retrieved\", image_paths_retrieved, batch_no)\n      $plain_pngs_paths = image_paths_retrieved.plain_pngs;\n      $sobel_jpgs_paths = image_paths_retrieved.sobel_jpgs; \n      $timestamps = image_paths_retrieved.timestamps;\n      $plain_jpgs_paths = image_paths_retrieved.plain_jpgs;\n      // $image_variables = image_paths_retrieved.variables;\n      console.log(\"$plain_jpgs_paths\", $plain_jpgs_paths)\n      \n      // console.log(\"plain_jpgs_paths\", $plain_jpgs_paths)\n      // console.log(\"sobel_jpgs_paths\", $sobel_jpgs_paths)\n      // console.log(\"timestamps\", $timestamps)\n      reRenderImages(batch_no, slider_value)\n    \n      get_all_completed_batches(batch_no)\n    }\n\n\n    async function send_local_collection_id(col_id){\n        console.log(\"col_id\", col_id)\n        // $completed_collection = []\n        const response = await fetch(\"./send_local_collection_id/\"+ col_id)\n        const completed_collection_response = await response.json();\n        $completed_collection = completed_collection_response.completed_collection\n        // console.log(\"collection_id\", collection_id)\n        // console.log(\"collection_id_response\", collection_id_response)\n        console.log(\"$completed_collection\",$completed_collection)\n        // collection_id_for_image = col_id\n      \n      }\n\n      async function send_local_company_selection(){\n        console.log(\"Entering send_local_company_selection\")\n        console.log(\"$local_company_selection\", $local_company_selection)\n        const response = await fetch(\"./send_local_company_selection/\"+ $local_company_selection)\n        const local_company_selection_response = await response.json();\n        $matching_local_product_names = local_company_selection_response.matching_local_product_names\n        $matching_local_user_names = local_company_selection_response.matching_local_user_names\n        $matching_local_collection_ids = local_company_selection_response.matching_local_collection_ids\n        console.log(\"$local_company_selection_response\",local_company_selection_response)\n        $local_collection_id = $matching_local_collection_ids[0]\n        if($local_collection_id)\n        {send_local_collection_id($local_collection_id)}\n      \n      }\n      async function send_local_product_selection(){\n        \n        const response = await fetch(\"./send_local_product_selection/\"+ $local_product_selection)\n        const local_product_selection_response = await response.json();\n        \n        $matching_local_user_names = local_product_selection_response.matching_local_user_names\n        $matching_local_collection_ids = local_product_selection_response.matching_local_collection_ids\n        $local_collection_id = $matching_local_collection_ids[0]\n        console.log(\"$local_product_selection_response\",local_product_selection_response)\n        if($local_collection_id)\n        {send_local_collection_id($local_collection_id)}\n       \n      \n      }\n      \n      async function send_local_user_selection(){\n        \n        const response = await fetch(\"./send_local_user_selection/\"+ $local_user_selection)\n        const local_user_selection_response = await response.json();\n        $matching_local_collection_ids = local_user_selection_response.matching_local_collection_ids\n        \n        console.log(\"$local_user_selection_response\",local_user_selection_response)\n        $local_collection_id = $matching_local_collection_ids[0]\n        if($local_collection_id)\n        {send_local_collection_id($local_collection_id)}\n      }\n    // let process_delay_options = [\"0 seconds\", \n    // \"15 seconds\", \"30 seconds\", \"2 mins\", \"5 mins\", \"10 mins\", \"30 mins\", \"60 mins\"];\n    // let p_delay = \"\";\n\n    async function process_batch_images(){\n        // console.log(\"process_batch_images\")\n        // console.log(\"$process_delay\", $process_delay)\n        // p_delay = $process_delay;\n        const response = await fetch(\"./process_batch_images\")\n        const process_batch_images_response = await response.json();\n        // console.log(\"process_batch_images_response\", process_batch_images_response)\n    }\n        \n\n    \n  // // let comp_batches = [];\n  // setTimeout( function() {\n  //   console.log(\"$completed_batches.length\",$completed_batches.length)\n  //   // console.log(\"$completed_batches\",$completed_batches)\n  // }, \"10000\");\n  \n\n  async function get_all_completed_batches (batch_no) {\n    // console.log(\"$completed_batches\",$completed_batches)\n    // comp_batches = $completed_batches\n    // console.log(\"$completed_batches.length\",$completed_batches.length)\n    // console.log(\"comp_batches\",comp_batches)\n    if ($collection_running){\n          if (!($completed_batches.length === 0)){\n        new_machine_location = $completed_batches[batch_no-1].machine_location;\n        new_product_type = $completed_batches[batch_no-1].product_type;\n        new_product_container = $completed_batches[batch_no-1].product_container;\n        new_product_weight = $completed_batches[batch_no-1].product_weight;\n        new_batch_notes = $completed_batches[batch_no-1].batch_notes; \n        console.log(\"new_batch_notes\",new_batch_notes)\n        }\n    }\n    else{\n      if (!($completed_collection.length === 0)){\n        new_machine_location = $completed_collection[batch_no-1].machine_location;\n        new_product_type = $completed_collection[batch_no-1].product_type;\n        new_product_container = $completed_collection[batch_no-1].product_container;\n        new_product_weight = $completed_collection[batch_no-1].product_weight;\n        new_batch_notes = $completed_collection[batch_no-1].batch_notes; \n        new_additional_batch_notes = $completed_collection[batch_no-1].additional_batch_notes; \n        console.log(\"new_batch_notes\",new_batch_notes)\n        }\n\n    }\n    \n  }\n  \n  import {Slider} from \"smelte\";\n  let disabled = false;\n  let slider_value;\n  $: slider_value = 1;\n  // console.log(batch_no, plain_pngs_paths_string)\n  let plain_image_path = \"\";\n  let sobel_image_path = \"\" ;\n  $: sobel_image_path;\n  $: plain_image_path;\n\n  // console.log( plain_image_path)\n\n  let isEnabled = true;\n\n  function arrowForward() {\n    if (slider_value < $plain_pngs_paths.length){\n    slider_value = slider_value +1\n    reRenderImages(batch_no, slider_value)\n  \n  }\n  }\n\n  function arrowBack() {\n\n  if (slider_value > 1) {\n    slider_value = slider_value - 1\n    reRenderImages(batch_no, slider_value)\n  }\n}\n  function reRenderImages(batch_no, slider_value){\n    // console.log(\"rerendering\")\n    plain_pngs_paths_string = $plain_pngs_paths[slider_value-1]\n    sobel_jpgs_paths_string = $sobel_jpgs_paths[slider_value-1]\n    plain_jpgs_paths_string = $plain_jpgs_paths[slider_value-1]\n    console.log(\"$plain_jpgs_paths\", $plain_jpgs_paths)\n    console.log(\"plain_pngs_paths_string\",plain_pngs_paths_string)\n    // console.log(\"sobel_jpgs_paths_string\",sobel_jpgs_paths_string)\n    // console.log(\"$image_quality\", $image_quality)\n    if (!$collection_running){\n      // console.log(\"$local_collection_id\", $local_collection_id)\n      // console.log(\"create_mode_test\", $create_mode_dir.substring(15,26))\n      if($image_quality==\"jpg\"){\n        plain_image_path = $create_mode_dir.substring(15,26) + \"temp_collections/\"+$local_collection_id + \"/batch_\" + batch_no + \"/All_Images/plain_jpgs/\"+ plain_jpgs_paths_string;\n      }\n      else if($image_quality==\"png\"){\n        plain_image_path = $create_mode_dir.substring(15,26) + \"temp_collections/\"+$local_collection_id + \"/batch_\" + batch_no + \"/All_Images/plain_pngs/\"+ plain_pngs_paths_string;\n\n      }\n      sobel_image_path = $create_mode_dir.substring(15,26) + \"temp_collections/\"+$local_collection_id + \"/batch_\" + batch_no + \"/All_Images/sobel_jpgs/\"+ sobel_jpgs_paths_string;\n      // console.log(\"sobel_image_path\",sobel_image_path)\n      // console.log(\"$completed_collection_render\",$completed_collection)\n      \n      if (!($completed_collection.length === 0)){\n      current_image_variables = $completed_collection[Number(batch_no)-1][\"individual_images\"][plain_pngs_paths_string.split('.')[0]]\n      // [plain_pngs_paths_string.split('.')[0]]\n      // console.log(\"current_image_variables_completed_collection\",current_image_variables)\n    }\n  }\n    else if ($collection_running) {\n      // console.log(\"create_mode_test1\", $create_mode_dir.substring(15))\n      \n      if($image_quality==\"jpg\"){\n        plain_image_path = $create_mode_dir.substring(15) + \"/batch_\" + batch_no + \"/All_Images/plain_jpgs/\"+ plain_jpgs_paths_string;\n      }\n      else if($image_quality==\"png\"){\n        plain_image_path = $create_mode_dir.substring(15) + \"/batch_\" + batch_no + \"/All_Images/plain_pngs/\"+ plain_pngs_paths_string;\n\n      }\n      sobel_image_path = $create_mode_dir.substring(15) + \"/batch_\" + batch_no + \"/All_Images/sobel_jpgs/\"+ sobel_jpgs_paths_string;\n      if (!($completed_batches.length === 0)){\n      current_image_variables = $completed_batches[Number(batch_no)-1][\"individual_images\"][plain_pngs_paths_string.split('.')[0]]\n      // [plain_pngs_paths_string.split('.')[0]]\n      // console.log(\"current_image_variables\",current_image_variables)\n    }\n    }\n      // console.log(\"plain_image_path\",plain_image_path)\n    // console.log(\"sobel_image_path\",sobel_image_path)\n    current_time_stamp = $timestamps[plain_pngs_paths_string]\n    // current_image_variables = $image_variables[plain_pngs_paths_string]\n    \n    // console.log(\"$timestamps\",$timestamps)\n    // console.log(\"current_time_stamp\",current_time_stamp)\n    // getTimeStamp()\n  }\n  let current_time_stamp = \"\";\n  $: current_time_stamp;\n  let current_image_variables = {};\n  $: current_image_variables;\n\n  // async function getTimeStamp() {\n  //   current_time_stamp = \"Loading...\"\n  //   const response = await fetch(\"./get_parsed_timestamp/\"+plain_pngs_paths_string);\n  //   const timestamp_retrieved = await response.json();\n  //   console.log(\"timestamp_retrieved\", timestamp_retrieved)\n  //   current_time_stamp = timestamp_retrieved\n\n\n  // }  \n  function sobel_change() {\n\n    isEnabled = !isEnabled\n  }   \n  \n  let image_deleted_success;\n  $: image_deleted_success = \"\";\n  async function deleteImage() {\n    // console.log(\"entered delete\")\n    const response = await fetch(\"./delete_image/\" + plain_pngs_paths_string + \"/\" + sobel_jpgs_paths_string+ \"/\"+ (batch_no.toString()));\n    const deleted_message = await response.json();\n    // console.log(\"deleted_message\", deleted_message)\n    image_deleted_success = true\n    get_all_images(batch_no)\n\n  }\n  let showDeleteImageModal = false;\n  let new_machine_location;\n  let new_product_type;\n  let new_product_container;\n  let new_product_weight;\n  let new_additional_batch_notes;\n  let new_batch_notes;\n  // let machine_location_string = {\"<span class:subtitle-1>Machine Location: </span>\"};\n  // if ($completed_batches){\n  //   console.log($completed_batches)\n  \n  $: new_machine_location =  \"\";\n  $: new_product_type = \"\";\n  $: new_product_container = \"\";\n  $: new_product_weight= \"\";\n  $: new_batch_notes = \"\";\n  $: new_additional_batch_notes= \"\";\n  \n  // }\n  // let updateDetail = false;\n  \n\n  async function updateDetails (detail_key, new_value) {\n    \n    if(new_value ===\"\"){\n      new_value = \"nothing_to_see_here\";\n    }\n\n    if(detail_key === \"batch_notes\" || \"additional_batch_notes\"){\n      new_value= new_value.replace(/\\n/g,\" \")\n      console.log(\"new_value1\", new_value)\n\n    }\n    \n    console.log(\"detail_key,new_value, batch_no\",detail_key,new_value, batch_no)\n    if ($collection_running){\n    const response = await fetch(\"./update_completed_batches/\"+ batch_no +\"/\"+ detail_key +\"/\" +new_value );\n    const update_completed_batches_response = await response.json();\n    $completed_batches = update_completed_batches_response.completed_batches\n    console.log(\"update_completed_batches_response\",update_completed_batches_response);\n    }\n    else{ \n    const response = await fetch(\"./update_completed_collection/\"+ batch_no +\"/\"+ detail_key +\"/\" +new_value );\n    const update_completed_collection_response = await response.json();\n    $completed_collection = update_completed_collection_response.completed_collection\n    console.log(\"update_completed_collection_response\",update_completed_collection_response);\n\n\n    }\n    \n  }\n  \n  \n \n\n  \n  function viewVariables() {\n    showViewVariablesModal = true;\n    // $overflow_create_page = false;\n    // document.getElementById(\"MyElement\").className = \"MyClass\";\n\n  }\n  async function     retrieve_local_details(){\n\n    const response = await fetch(\"./retrieve_local_details\")\n    const retrieve_local_details_response = await response.json();\n    $matching_local_company_names = retrieve_local_details_response.local_companies\n    $matching_local_product_names = retrieve_local_details_response.local_products\n    $matching_local_user_names = retrieve_local_details_response.local_users\n    $matching_local_collection_ids = retrieve_local_details_response.collection_ids\n    $collection_ids = retrieve_local_details_response.collection_ids\n    if(!$local_collection_id)\n      {$local_collection_id = $matching_local_collection_ids[0]}\n    if($local_collection_id)\n        {send_local_collection_id($local_collection_id)}\n    // const send_collection_id_response = await fetch(\"./send_collection_id/\"+ $local_collection_id)\n    console.log(\"collection_ids\",$matching_local_collection_ids, \"local_companies\",$matching_local_company_names,\n    \"local_products\",$matching_local_product_names,\"local_users\",$matching_local_user_names)\n  }\n\n  onMount( () =>\n  {\n    console.log(\"$local_collection_id 1\", $local_collection_id)\n    get_all_images(batch_no)\n    retrieve_local_details()\n    console.log(\"$local_collection_id 2\", $local_collection_id)\n    \n  })\n\n  \n  // afterUpdate( () =>\n  // {\n  //   get_all_images(batch_no)\n    \n  // })\n\n  let variable_search_term = \"\"\n\n  async function search_variables(variable_search_term, plain_pngs_paths_string, batch_no) {\n    console.log(\"search_variables\", variable_search_term, plain_pngs_paths_string, batch_no)\n    if (variable_search_term === \"\"){\n      variable_search_term = \"get_all\"\n      \n    }\n    // console.log(\"current_image_variables_test\",current_image_variables);\n    const response = await fetch(\"./search_variables/\"+ variable_search_term + \n    \"/\" + plain_pngs_paths_string + \"/\" + batch_no);\n    const current_image_variables_response = await response.json();\n    current_image_variables = current_image_variables_response\n    // console.log(\"current_image_variables\",current_image_variables);\n\n\n  }\n  let comp_batches = [];\n  $: comp_batches = $completed_batches;\n  // console.log(\"comp_batches\", comp_batches)\n  // const delayModuleLoad = module =>\n  //   new Promise(res =>\n  //     setTimeout(() => res(module), Math.random() * 2000),\n  //   );\n\n  let promise = isJobsLeft()\n  function isJobsLeft() {\n    if ($number_of_jobs_left === 0){\n      return \"ok\"\n    }\n  }\n\n \n  // }\n  function closeDeleteImageModal() {\n    showDeleteImageModal = false\n    image_deleted_success = false\n\n\n\n  }\n\n  async function no_local_collection_search_term(collection_type) {\n          console.log(\"no_local_collection_search_term\", collection_type);\n          local_collection_search_term = \"get_all\";\n          const response = await fetch(\"./send_local_collection_search_term/\"+ collection_type + \"/\" + local_collection_search_term);\n          const send_local_collection_search_term_response = await response.json();\n          console.log(\"send_local_collection_search_term_response\", send_local_collection_search_term_response);\n          local_collection_search_term = \"\";\n          $matching_local_company_names = send_local_collection_search_term_response.matching_local_company_names\n          $matching_local_product_names = send_local_collection_search_term_response.matching_local_product_names\n          $matching_local_user_names = send_local_collection_search_term_response.matching_local_user_names\n            \n          console.log(\"$matching_local_company_names\", $matching_local_company_names);\n\n  }\n  let local_collection_search_term = \"\"\n\n  async function send_local_collection_search_term(collection_type) {\n        \n        \n        if (collection_type === \"company\"){\n          console.log(\"local_company_search_term\", $local_company_search_term);\n            local_collection_search_term  = $local_company_search_term;\n            if (!local_collection_search_term){\n              no_local_collection_search_term(collection_type)\n            }\n            else{\n        \n            const response = await fetch(\"./send_local_collection_search_term/\"+ collection_type + \"/\" + local_collection_search_term);\n            const send_local_collection_search_term_response = await response.json();\n            $matching_local_company_names = send_local_collection_search_term_response.matching_local_company_names\n            $local_company_selection = send_local_collection_search_term_response.local_company_selection\n            send_local_company_selection()\n            }\n        }\n\n        else if (collection_type === \"product\") {\n          console.log(\"local_product_search_term\", $local_product_search_term);\n            local_collection_search_term  = $local_product_search_term;\n            if (!local_collection_search_term){\n              no_local_collection_search_term(collection_type)\n            }\n            else{\n            const response = await fetch(\"./send_local_collection_search_term/\"+ collection_type + \"/\" + local_collection_search_term);\n            const send_local_collection_search_term_response = await response.json();\n            $matching_local_product_names = send_local_collection_search_term_response.matching_local_product_names\n            $local_product_selection = send_local_collection_search_term_response.local_product_selection\n            send_local_product_selection()\n            }\n\n        }\n\n        else if (collection_type === \"user\") {\n          console.log(\"local_user_search_term\", $local_user_search_term);\n            local_collection_search_term  = $local_user_search_term;\n            if (!local_collection_search_term){\n              no_local_collection_search_term(collection_type)\n            }\n            else{\n            const response = await fetch(\"./send_local_collection_search_term/\"+ collection_type + \"/\" + local_collection_search_term);\n            const send_local_collection_search_term_response = await response.json();\n            $matching_local_user_names = send_local_collection_search_term_response.matching_local_user_names\n            $local_user_selection = send_local_collection_search_term_response.local_user_selection\n            send_local_user_selection()\n            }\n        }\n\n        \n        \n\n    }\n    // const jq = window.$;\n\n    // window.$(document).ready(function(){\n    // var socket = io();\n    // socket.on('some event', function(msg) {\n    //   print(\"it worked\", msg)\n    // })\n    \n  // })\n\n  </script>\n\n  \n  <style>\n      h6 { \n        display:inline;\n      }\n\n     \n     \n\n  </style>\n{#if !$collection_running && $ready_to_work }\n         <!-- {#if $completed_collections.length } -->\n        {#if $collection_ids.length }\n             \n        <div class=\"row align-items-center \"> \n\n              <div class=\"col-md-2\">\n                  <TextField label = \"Search Company\" color=\"blue\" bind:value={$local_company_search_term} on:input={() => send_local_collection_search_term(\"company\")} outlined />\n\n                  <!--  svelte-ignore a11y-no-onchange -->\n                  <select bind:value={$local_company_selection} on:change={() => send_local_company_selection()} >\n                      {#each $matching_local_company_names as local_company_selection}\n                        <option  value={local_company_selection} >{local_company_selection}</option>\n                      {/each}\n                  <select> \n              </div>\n              <!-- <div class=\"col-md-1 text-center\">\n                <Button color=\"blue\" icon=\"arrow_forward\" disabled /> -->\n              <!-- <Icon color=\"blue\">arrow_forward</Icon> -->\n              <!-- <Chip disabled color=\"blue\" selected icon=\"arrow_forward\"></Chip> -->\n              <!-- </div> --> \n              <div class=\"col-md-2\">\n                <TextField label = \"Search Product\" color=\"blue\" bind:value={$local_product_search_term} on:input={() => send_local_collection_search_term(\"product\")} outlined />\n\n                <!--  svelte-ignore a11y-no-onchange -->\n                <select bind:value={$local_product_selection} on:change={() => send_local_product_selection()} >\n                    {#each $matching_local_product_names as local_product_selection}\n                      <option  value={local_product_selection} >{local_product_selection}</option>\n                    {/each}\n                <select> \n              </div>\n\n              <div class=\"col-md-2\">\n                <TextField label = \"Search User\" color=\"blue\" bind:value={$local_user_search_term} on:input={() => send_local_collection_search_term(\"user\")} outlined />\n\n                  <!--  svelte-ignore a11y-no-onchange -->\n                  <select bind:value={$local_user_selection} on:change={() => send_local_user_selection()} >\n                      {#each $matching_local_user_names as local_user_selection}\n                        <option  value={local_user_selection} >{local_user_selection}</option>\n                      {/each}\n                  <select> \n             </div>\n\n              <div class=\"col-md-2 offset-md-1\">\n\n                <!--  svelte-ignore a11y-no-onchange -->\n                <select bind:value={$local_collection_id} on:change={() => send_local_collection_id($local_collection_id)} >\n                    {#each $matching_local_collection_ids as collection_id}\n                      <option  value={collection_id} >{collection_id}</option>\n                    {/each}\n                <select> \n              </div>\n        \n        </div>    \n                {#each $completed_collection as { batch_number, machine_location, product_type,\n                  product_container, product_weight,contaminant_boolean, contaminant_details,\n                  voltage_kv, current_ma, build_date, soft_version, batch_notes,individual_images,\n                  number_of_jobs_left, first_image_dir}, i}\n                      <Card.Card   class = \"h-auto w-1/4 m-4 p-2\" on:change= {() => get_all_images(batch_number)}>\n                        <div slot=\"title\">\n                          <Card.Title \n                          title=\"Batch No. {batch_number}\"\n                          classes = \"text-center\"\n                          \n                          />\n                        </div>\n                    \n                        <div  slot=\"media\" on:click={openImageModal(batch_number)} >\n                          <!-- svelte-ignore a11y-img-redundant-alt -->\n                          <img \n                            class=\"w-auto h-64\"\n                            alt = \"Something went wrong...\"\n                            src = {($create_mode_dir.substring(15,26) + \"temp_collections/\"+ $local_collection_id + \"/batch_\"+ batch_number + \"/All_Images/plain_jpgs/\"+ first_image_dir +  \".jpg\")}\n                            loading=\"eager\"\n                            />\n                        </div>\n        \n                        <div slot=\"text\" class=\"text-left  p-1 pb-0 pt-3 text-gray-700 body-2\" >\n                          <div class= \"pb-1 line-clamp-1\"> <span class=\"subtitle-1\">Machine Location: </span><span  class = \"text-black dark:text-gray-100\">{machine_location}</span></div>\n                          <div class= \"pb-1 line-clamp-1\"> <span class=\"subtitle-1\">Product Type: </span><span class = \"text-black dark:text-gray-100\">{product_type}</span></div>\n                          <div class= \"pb-1 line-clamp-1\"> <span class=\"subtitle-1\">Product Container: </span><span class = \"text-black dark:text-gray-100\">{product_container}</span></div>\n                          <div class= \"pb-1 line-clamp-1\"> <span class=\"subtitle-1\">Product Weight (kg): </span><span class = \"text-black dark:text-gray-100\">{product_weight}</span></div>\n                          <div class= \"pb-1 line-clamp-1\"> <span class=\"subtitle-1\">Contains Contaminants? </span><span class = \"text-black dark:text-gray-100\">{contaminant_boolean}</span></div>\n                          {#if contaminant_boolean===\"Yes\"}\n                          <div class= \"pb-1 line-clamp-1\"> <span class=\"subtitle-1\">Contaminant Details </span><span class = \"text-black dark:text-gray-100\">{contaminant_details}</span></div>\n                          {/if}\n                          {#if contaminant_boolean===\"No\"}\n                          <div class= \"pb-1 line-clamp-1 subtitle-1\">\n                            <br/>\n                          </div>\n                          {/if}\n                          <div class= \"pb-1 line-clamp-1\"> <span class=\"subtitle-1\">Build Date: </span><span class = \"text-black dark:text-gray-100\">{build_date}</span></div>\n                          <div class= \"pb-1 line-clamp-1\"> <span class=\"subtitle-1\">Software Version: </span><span class = \"text-black dark:text-gray-100\">{soft_version}</span></div>\n                          <div class= \"pb-1 line-clamp-1\"> <span class=\"subtitle-1\">Voltage (kV): </span><span class = \"text-black dark:text-gray-100\">{voltage_kv}</span></div>\n                          <div class= \"pb-1 line-clamp-1\"> <span class=\"subtitle-1\">Current (mA): </span><span class = \"text-black dark:text-gray-100\">{current_ma}</span></div>\n        \n                          <div class=\" text-center p-2 pb-0 pt-3\"  on:click={open_batch_notes_modal(batch_number)}>\n                            <h6 class = \"text-black dark:text-gray-100\">Batch Notes:</h6> \n                            {#if batch_notes}\n                            <div class = \"text-black dark:text-gray-100 line-clamp-3\" >{batch_notes}</div>\n                            {:else}\n                            <div class = \"text-gray-700 body-2 line-clamp-3\" >No Notes Yet</div>\n                            {/if}\n                          </div>\n                        </div>\n                      \n                      </Card.Card>\n                {/each}\n        {/if} \n          <!-- // {/each}   -->\n        <!-- {/if}  -->\n{:else if $collection_running && $ready_to_work}\n        {#if $batches_left_to_process}\n              {#if $fetching_images}\n                <div class=\"row align-items-center \">\n                  <div class=\"col-md-2\">\n                      <Button  color = \"blue\" disabled >Process</Button>\n                    </div>\n                      \n                      <!-- <div class=\"col-md-2 \"> -->\n                        \n                        <!-- svelte-ignore a11y-no-onchange -->\n                        <!-- <select bind:value={$process_delay} disabled >\n                            {#each process_delay_options as process_delay_number}\n                            <option  value={process_delay_number} >{process_delay_number}</option>\n                            {/each}\n                        <select> \n                        </div> -->\n                  </div>\n              {:else  if !$fetching_images}\n                  <div class=\"row align-items-center \">\n                    <div class=\"col-md-2\">\n                        <Button  color = \"blue\" on:click={process_batch_images} >Process</Button>\n                      </div>\n                        \n                        <!-- <div class=\"col-md-2 \">\n                           svelte-ignore a11y-no-onchange -->\n                          <!-- <select bind:value={$process_delay}   >\n                              {#each process_delay_options as process_delay_number}\n                              <option  value={process_delay_number} >{process_delay_number}</option>\n                              {/each}\n                          <select> \n                          </div> --> \n                    </div>\n              {/if}\n        {:else}\n        <div class=\"row align-items-center \">\n          <div class=\"col-md-2\">\n              <Button  color = \"blue\"  disabled >Process</Button>\n            </div>\n              \n              <!-- <div class=\"col-md-2 \"> -->\n                \n                <!-- svelte-ignore a11y-no-onchange -->\n                <!-- <select bind:value={$process_delay}  disabled >\n                    {#each process_delay_options as process_delay_number}\n                    <option  value={process_delay_number} >{process_delay_number}</option>\n                    {/each}\n                <select> \n                </div> -->\n          </div>\n        {/if}\n  \n\n   <!-- {#if $number_of_jobs_left === \"0\" }  -->\n   <!-- {#if $ready_to_work} -->\n\n{#if $completed_batches.length } \n    {#each $completed_batches as { batch_number, machine_location, product_type,\n      product_container, product_weight,contaminant_boolean, contaminant_details,\n      voltage_kv, current_ma, build_date, soft_version, batch_notes, individual_images,\n       first_image_dir, images_processed}, i}\n          \n              \n              <Card.Card   class = \"h-auto w-1/4 m-4 p-2\" on:change= {() => get_all_images(batch_number)}>\n                <div slot=\"title\">\n                  <Card.Title \n                  title=\"Batch No. {batch_number}\"\n                  classes = \"text-center\"\n                  \n                  />\n                </div>\n                \n                <div  slot=\"media\" on:click={openImageModal(batch_number)} >\n                  <!-- svelte-ignore a11y-img-redundant-alt -->\n                  {#if images_processed}\n                  <Image \n                    class=\"w-auto h-64\"\n                    \n                    src = {($create_mode_dir.substring(15)+ \"/batch_\"+ batch_number + \"/All_Images/plain_jpgs/\"+ first_image_dir+  \".jpg\")}\n                    \n                    />\n                  {:else if !images_processed}\n                  <div class=\"w-auto h-64 text-center pt-24 \"><h7>Images ready to be processed </h7></div>\n                  {/if}\n                </div>\n                \n\n                <div slot=\"text\" class=\"text-left  p-1 pb-0 pt-3 text-gray-700 body-2\" >\n                  <div on:click={openDetailsModal(batch_number)}>\n                  <div class= \"pb-1 line-clamp-1\"> <span class=\"subtitle-1\">Machine Location: </span><span  class = \"text-black dark:text-gray-100\">{machine_location}</span></div>\n                  <div class= \"pb-1 line-clamp-1\"> <span class=\"subtitle-1\">Product Type: </span><span class = \"text-black dark:text-gray-100\">{product_type}</span></div>\n                  <div class= \"pb-1 line-clamp-1\"> <span class=\"subtitle-1\">Product Container: </span><span class = \"text-black dark:text-gray-100\">{product_container}</span></div>\n                  <div class= \"pb-1 line-clamp-1\"> <span class=\"subtitle-1\">Product Weight (kg): </span><span class = \"text-black dark:text-gray-100\">{product_weight}</span></div>\n                  <div class= \"pb-1 line-clamp-1\"> <span class=\"subtitle-1\">Contains Contaminants? </span><span class = \"text-black dark:text-gray-100\">{contaminant_boolean}</span></div>\n                  {#if contaminant_boolean===\"Yes\"}\n                  <div class= \"pb-1 line-clamp-1\"> <span class=\"subtitle-1\">Contaminant Details </span><span class = \"text-black dark:text-gray-100\">{contaminant_details}</span></div>\n                  {/if}\n                  {#if contaminant_boolean===\"No\"}\n                  <div class= \"pb-1 line-clamp-1 subtitle-1\">\n                    <br/>\n                  </div>\n                  {/if}\n                  <div class= \"pb-1 line-clamp-1\"> <span class=\"subtitle-1\">Build Date: </span><span class = \"text-black dark:text-gray-100\">{build_date}</span></div>\n                  <div class= \"pb-1 line-clamp-1\"> <span class=\"subtitle-1\">Software Version: </span><span class = \"text-black dark:text-gray-100\">{soft_version}</span></div>\n                  <div class= \"pb-1 line-clamp-1\"> <span class=\"subtitle-1\">Voltage (kV): </span><span class = \"text-black dark:text-gray-100\">{voltage_kv}</span></div>\n                  <div class= \"pb-1 line-clamp-1\"> <span class=\"subtitle-1\">Current (mA): </span><span class = \"text-black dark:text-gray-100\">{current_ma}</span></div>\n                </div> \n                  <div class=\" text-center p-2 pb-0 pt-3\" on:click={open_batch_notes_modal(batch_number)} >\n                    <h6 class = \"text-black dark:text-gray-100\">Batch Notes:</h6> \n                    {#if batch_notes}\n                    <div class = \"text-black dark:text-gray-100 line-clamp-3\" >{batch_notes}</div>\n                    {:else}\n                    <div class = \"text-gray-700 body-2 line-clamp-3\" >No Notes Yet</div>\n                    {/if}\n                  </div>\n                </div>\n                \n              \n                \n\n                \n              \n              </Card.Card>\n          {/each}\n  \n  {/if} \n{/if}\n      <Dialog class=\"h-5/6 w-5/6 \" bind:value={$showProcessDialog} persistent>\n        <div class=\"row align-items-center text-center p-72\">\n        <div class=\"col-md-6 offset-md-1\"><h2>Processing Jobs Left:</h2></div>\n        <div class=\"col-md-2 \"><h2 ><Badge class= \"align-top\" color = \"info\">  {$number_of_jobs_left} </Badge></h2></div>\n  \n        </div>\n      </Dialog> \n  \n\n\n        \n      \n  \n  <!-- {/if} -->\n  <!-- {#if !$number_of_jobs_left === \"0\" }\n  <h7>Processing Images</h7>\n  {/if} -->\n\n  <Dialog class=\"h-screen w-5/6\" bind:value={showImageModal} > \n    <!-- <Label><h3 >Batch Notes (Batch No.{$batch_number})</h3></Label> -->\n    <!-- <div class=\"bg-red-500 pb-2/3\">\n    <div class = \" h-5/12 w-5/12 \"> -->\n    <div class=\"h-screen w-full\" >\n      <div style= \"min-height: 720px\">\n                \n                  \n                  {#if isEnabled}   \n                  <div class=\"grid grid-rows-1 grid-flow-col gap-x-36 z-50\" >\n                    <!-- svelte-ignore a11y-missing-attribute -->\n                    <!-- <img alt= \"Loading\" loading=\"lazy\" style=\"max-height:700px\" use:zoom={1.8} src = {plain_image_path}/> -->\n                    <img alt= \"Loading....\" loading=\"eager\" style=\"max-height:700px\"  src = {plain_image_path}/>\n\n                    \n                    \n                    \n                  \n                    \n                        <!-- svelte-ignore a11y-missing-attribute -->\n                    <!-- <img alt= \"Loading\" loading=\"lazy\" style=\"max-height:700px\" use:zoom={1.8} src = {sobel_image_path}/> -->\n                    <img alt= \"Loading....\" loading=\"eager\" style=\"max-height:700px\"  src = {sobel_image_path}/>\n\n\n                  </div>\n                  {/if}  \n                  {#if !isEnabled}  \n                  \n                    <!-- svelte-ignore a11y-missing-attribute -->\n                    <img class= \"z-50\" style=\"display: block;\n                    margin-left: 400px;\n                    margin-right: 250px;\n                    max-width:100%;\n                    max-height:700px; object-fit:contain; position: absolute; transform: rotate(90deg) scale(1.2);\" use:zoom={2} src = {plain_image_path}/>\n                       \n                  \n                  \n                    {/if} \n                      \n                \n      </div>    \n              <!-- </div>\n            </div> -->\n          <!-- <div class=\"text-gray-700\"><textarea placeholder=\"Type batch specific notes here\"  bind:value={$batch_notes} rows=\"14\" cols=\"80 \" on:change={add_batch_notes}></textarea></div> -->\n          <div class= \"h-2/12 \" > \n            <!-- <Image src = {\"/image_data_directory/batch_\"+ batch_no + \"/All_Images/plain_pngs/4_0_20191216153022.png\"} /> -->\n            \n            <small>Image Number: {slider_value}</small>\n            <small>Time Stamp: {current_time_stamp}</small>\n            \n            <Slider min=\"1\" max={$plain_pngs_paths.length} bind:value = {slider_value} {disabled} color=\"blue\" on:change= {reRenderImages(batch_no,slider_value) } />\n          </div> \n            \n          \n        <div class= \"h-2/9 \">\n          <div class=\"row align-items-center \">\n            <div class=\"col-md-1 \">\n              {#if $collection_running  }\n                  <div class=\"row align-items-center \">\n\n                          \n                            <div class= \"p-1\">\n                            Batch no:   \n                            </div>\n                            \n                          <!-- svelte-ignore a11y-no-onchange -->\n                            <select bind:value={batch_no} on:change={get_all_images(batch_no)} >\n                              {#each $completed_batches as  {batch_number}}\n                                <option  value={batch_number} > {batch_number}</option>\n                              {/each}\n                          <select> \n                            \n\n                  </div>\n            {:else if !$collection_running }\n            <div class=\"row align-items-center \">\n\n                                \n                    <div class= \"p-1\">\n                    Batch no:   \n                    </div>\n                    \n                  <!-- svelte-ignore a11y-no-onchange -->\n                    <select bind:value={batch_no} on:change={get_all_images(batch_no)} >\n                      {#each $completed_collection as  {batch_number}}\n                        <option  value={batch_number} > {batch_number}</option>\n                      {/each}\n                  <select> \n                    \n\n            </div>\n\n            {/if}\n            </div>\n            <div class=\"offset-md-2 col-md-1 \">\n              <Button color=\"blue\" icon=\"arrow_back\" on:click={arrowBack} />\n            </div>\n\n            <div class=\"col-md-1\">\n              <Button color=\"blue\" icon=\"arrow_forward\" on:click={arrowForward} />\n            </div>\n\n            <div class=\"col-md-1\">\n              <Button color=\"blue\" icon=\"view_list\" on:click={viewVariables} >Variables</Button>\n            </div>\n\n            <div class=\"col-md-3  text-center\">\n              <h5 class=\"pb-8 pt-10\" id=\"switches\">Sobel On/Off </h5>\n              <Switch bind:value={isEnabled} label=\"Enabled\" color=\"blue\" on:click={sobel_change}/>\n            </div>\n\n            <div class=\"col-md-1 \">\n              <Button color=\"blue\" text on:click={() => showDeleteImageModal = true}>Delete Image</Button>\n            </div>\n            <div class=\"col-md-1 \">\n              <Button color=\"blue\" text on:click={() => showImageModal = false}>Close</Button>\n            </div>\n            \n            \n\n          </div>\n\n        </div>\n\n    </div>\n  </Dialog>\n\n  <Dialog  bind:value={showdetailsModal} on:change={get_all_completed_batches(batch_no)}>\n    \n    <div >\n      <div  class=\"text-left  p-1 pb-0 pt-3 text-gray-700 body-2\">\n\n            \n                <span class= \"pb-1 line-clamp-1\"> <span class=\"subtitle-1\">Machine Location: </span><input  class = \"text-black dark:text-gray-100\" bind:value={new_machine_location} on:input={() => updateDetails(\"machine_location\", new_machine_location)}></span>\n                <span class= \"pb-1 line-clamp-1\"> <span class=\"subtitle-1\">Product Type: </span><input class = \"text-black dark:text-gray-100\" bind:value={new_product_type} on:input={() => updateDetails(\"product_type\", new_product_type)}></span>\n                <span class= \"pb-1 line-clamp-1\"> <span class=\"subtitle-1\">Product Container: </span><input class = \"text-black dark:text-gray-100\" bind:value={new_product_container} on:input={() => updateDetails(\"product_container\", new_product_container)}></span>\n                <span class= \"pb-1 line-clamp-1\"> <span class=\"subtitle-1\">Product Weight (kg): </span><input class = \"text-black dark:text-gray-100\" bind:value={new_product_weight} on:input={() => updateDetails(\"product_weight\", new_product_weight)} ></span>\n                \n      </div>\n        <Button color=\"blue\" text on:click={() => showdetailsModal = false}>Close</Button>\n\n        \n    </div>\n  </Dialog>\n\n\n  <Dialog  bind:value={show_batch_notes_modal} on:change={get_all_completed_batches(batch_no)}>\n    {#if $collection_running  }\n        <h3 >Batch Notes (Batch No.{batch_no})</h3>\n        <div class=\"text-gray-700 \"><textarea placeholder=\"Type batch specific notes here\"  bind:value={new_batch_notes} rows=\"14\" cols=\"80 \" on:input={() => updateDetails(\"batch_notes\", new_batch_notes)}></textarea></div> \n        \n    {:else if !$collection_running }\n      <h3 >Batch Notes (Batch No.{batch_no})</h3>\n      <!-- <div class=\"text-gray-700\"><textarea placeholder=\"Type batch specific notes here\"  bind:value={new_batch_notes} rows=\"14\" cols=\"80 \" on:input={() => updateDetails(\"batch_notes\", new_batch_notes)}></textarea></div> -->\n      <div class=\"text-gray-700\"><textarea rows=\"5\" cols=\"80 \" readonly bind:value={new_batch_notes}></textarea> </div>\n      <h6>Additional Batch Notes</h6>\n      <div class=\"text-gray-700 \"><textarea wrap=\"hard\" placeholder=\"Type Additional Batch notes here\"  bind:value={new_additional_batch_notes} rows=\"14\" cols=\"80 \" on:input={() => updateDetails(\"additional_batch_notes\", new_additional_batch_notes)}></textarea></div>\n      \n      \n      {/if}\n    \n    <div slot=\"actions\">\n        <Button color=\"blue\" text on:click={() => show_batch_notes_modal = false}>OK</Button>\n    </div>\n\n        \n    \n</Dialog>\n\n  <Dialog bind:value={showDeleteImageModal}  persistent> \n    {#if image_deleted_success}\n    <div class=\"col-md-1 \">\n      Image Deleted\n    </div>\n    <div class=\"col-md-1 \">\n      <Button color=\"blue\" text on:click={() => closeDeleteImageModal()}>OK</Button>\n    </div>\n    {/if}\n    \n    \n    {#if !image_deleted_success}\n    <div class=\"col-md-1 \">\n      Are you sure?\n    </div>\n    <div class=\"col-md-1 \">\n      <Button color=\"blue\" text on:click={deleteImage}>Yes</Button>\n    </div>\n    <div class=\"col-md-1 \">\n      <Button color=\"blue\" text on:click={() => closeDeleteImageModal()}>No</Button>\n    </div>\n    {/if}\n\n    \n  </Dialog>\n\n\n  <Dialog bind:value={showViewVariablesModal} > \n    <div class=\"container overflow-auto\" style= \"width: 400px; max-height: 720px\">\n    <!-- <List items={current_image_variables} /> -->\n    <div >\n      <TextField bind:value={variable_search_term} on:input={search_variables(variable_search_term, plain_pngs_paths_string, batch_no)} color=\"blue\" label=\"Search Variables Here\" outlined/>\n    </div>\n    {#each Object.entries(current_image_variables) as [key, value]}\n      \n      <h6> {key} : {value}  </h6>\n      \n    {/each }\n  </div>\n  \n\n    \n  </Dialog>\n\n  \n"
  ],
  "names": [],
  "mappings": "AAsEE,OAAO,cAAC,CAAC,AACP,OAAO,CAAE,QAAQ,AACnB,CAAC;AC7DD,QAAQ,cAAC,CAAC,AACR,SAAS,CAAE,OAAO,MAAM,CAAC,AAC3B,CAAC,AAED,IAAI,cAAC,CAAC,AACJ,SAAS,CAAE,OAAO,KAAK,CAAC,AAC1B,CAAC;AC8CD,OAAO,cAAC,CAAC,AACP,SAAS,CAAE,KAAK,AAClB,CAAC,AAED,KAAK,cAAC,CAAC,AACL,MAAM,CAAE,KAAK,AACf,CAAC;ACvDD,SAAS,eAAC,CAAC,AACT,SAAS,CAAE,qBAAM,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CACpC,QAAQ,CAAE,QAAQ,AACpB,CAAC,AAED,KAAK,eAAC,CAAC,AACL,gBAAgB,CAAE,CAAC,CAAC,CAAC,GAAG,CACxB,iBAAiB,CAAE,CAAC,CACpB,cAAc,CAAE,KAAK,CACrB,SAAS,CAAE,mBAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,AAC3C,CAAC,AAED,WAAW,qBAAO,CAAC,AACjB,IAAI,AAAC,CAAC,AACJ,SAAS,CAAE,OAAO,MAAM,CAAC,AAC3B,CAAC,AACH,CAAC,AAED,WAAW,mBAAK,CAAC,AACf,EAAE,AAAC,CAAC,AACF,gBAAgB,CAAE,CAAC,CAAC,CAAC,GAAG,CACxB,iBAAiB,CAAE,CAAC,AACtB,CAAC,AACD,GAAG,AAAC,CAAC,AACH,gBAAgB,CAAE,EAAE,CAAC,CAAC,GAAG,CACzB,iBAAiB,CAAE,GAAG,AACxB,CAAC,AACD,IAAI,AAAC,CAAC,AACJ,gBAAgB,CAAE,EAAE,CAAC,CAAC,GAAG,CACzB,iBAAiB,CAAE,IAAI,AACzB,CAAC,AACH,CAAC;ACxBD,IAAI,cAAC,CAAC,AACJ,SAAS,CAAE,sBAAQ,CAAC,EAAE,CAAC,WAAW,CAAC,QAAQ,AAC7C,CAAC,AACD,IAAI,cAAC,CAAC,AACJ,SAAS,CAAE,sBAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,AAClD,CAAC,AAED,WAAW,sBAAS,CAAC,AACnB,IAAI,AAAC,CAAC,AACJ,IAAI,CAAE,GAAG,CACT,KAAK,CAAE,EAAE,AACX,CAAC,AACD,EAAE,AAAC,CAAC,AACF,IAAI,CAAE,IAAI,CACV,KAAK,CAAE,IAAI,AACb,CAAC,AACH,CAAC,AACD,WAAW,sBAAS,CAAC,AACnB,IAAI,AAAC,CAAC,AACJ,IAAI,CAAE,IAAI,CACV,KAAK,CAAE,GAAG,AACZ,CAAC,AACD,EAAE,AAAC,CAAC,AACF,IAAI,CAAE,IAAI,CACV,KAAK,CAAE,GAAG,AACZ,CAAC,AACH,CAAC;ACrCD,OAAO,eAAC,CAAC,AACP,QAAQ,CAAE,QAAQ,CAAC,UAAU,AAC/B,CAAC;AC8FD,SAAS,eAAC,CAAC,AACT,SAAS,CAAE,KAAK,AAClB,CAAC;AC/CH,UAAU,cAAC,CAAC,AACV,WAAW,CAAE,IAAI,AACnB,CAAC,AACD,iBAAiB,cAAC,CAAC,AACjB,UAAU,CAAE,SAAS,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC,IAAI,AAC/C,CAAC,AACO,aAAa,AAAE,CAAC,AACtB,SAAS,CAAE,MAAM,AACnB,CAAC;AChBD,KAAK,cAAC,CAAC,AACL,MAAM,CAAE,GAAG,AACb,CAAC;ACID,QAAQ,eAAC,CAAC,AACR,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,WAAW,IAAI,CAAC,AAC7B,CAAC;ACsED,QAAQ,eAAC,CAAC,AACR,OAAO,CAAE,YAAY,AACvB,CAAC;AC3HC,QAAQ,IAAI,6EAA6E,CAAC,CAAC;AC6hBvF,EAAE,eAAC,CAAC,AACF,QAAQ,MAAM,AAChB,CAAC"
}